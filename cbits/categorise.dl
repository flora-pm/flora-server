// vim: set ft=prolog
// input : user gives category (1 or more) to each package
// output : normalised category

.decl user_package_category(category: symbol)
.input user_package_category

.decl normalised_package_category(category: symbol)
.output normalised_package_category
normalised_package_category(normalised) :-
  user_package_category(user_category),
  normalise_category(user_category, normalised).

.decl normalise_issue(category: symbol)
.output normalise_issue
normalise_issue(category) :-
  user_package_category(category),
  !normalise_category(category, _).

// Allowed flora categories
.decl flora_category(slug: symbol, name: symbol, synopsis: symbol)
.output flora_category
flora_category("algorithms", "Algorithms", "Algorithms implemented in Haskell, like sorting, searching").
flora_category("audio", "Audio", "Process digital signal, make music").
flora_category("bioinformatics", "Bioinformatics", "Methods and software for the analysis of biological data").
flora_category("cloud", "Cloud Computing", "Bindings to Cloud Computing platforms").
flora_category("command-line", "CLI & TUI tooling", "Libraries to develope command-line interfaces").
flora_category("compilers-interpreters", "Compilers and Interpreters", "Tooling to create compilers and interpreters").
flora_category("compression", "Data compression", "Reducing the size of things").
flora_category("concurrency", "Concurrency", "Concurrent programming techniques and tools").
flora_category("cryptography", "Cryptography", "Algorithms for encrypting and hashing data").
flora_category("data-structures", "Data Structures", "Data structures, whether purely functional or mutable").
flora_category("databases", "Databases", "Database drivers and interfaces").
flora_category("development", "Development", "Development helpers, integration with other languages").
flora_category("distributed", "Distributed Systems & Computation", "Tooling and techniques for writing distributed systems").
flora_category("distribution", "Package Distribution", "Building, Packaging and Distributing software in Haskell").
flora_category("ffi", "FFI", "Working with other languages and generating bindings").
flora_category("frp", "FRP", "Functional Reactive Programming").
flora_category("game-dev", "Game Development", "Libraries used for game development").
flora_category("generics", "Generics", "Working with Haskell's Generics mechanism").
flora_category("graphics", "Graphics", "Programming the system's rendering APIs").
flora_category("gui", "GUI", "Creating graphical user interfaces").
flora_category("hardware", "Hardware", "Digital circuit description and hardware interfacing").
flora_category("json", "JSON", "Parsing, producing and manipulating JSON").
flora_category("language", "Language", "Interfacing with other programming languages from Haskell").
flora_category("lenses", "Lenses", "Functional references such as Lenses, Folds and Traversals").
flora_category("maths", "Mathematics", "Numerical and Mathematical packages").
flora_category("monads", "Monads", "Effectful sequential computations").
flora_category("network", "Network Development", "Connection pools, DNS, HTTP, API clients and network protocols").
flora_category("nlp", "Natural Language Processing", "Tooling to work with natural languages").
flora_category("parallelism", "Parallelism", "Parallel programming").
flora_category("parser-implementations", "Parser Implementations", "Parsing data formats").
flora_category("parsers","Parsers", "Libraries to ingest and parse data").
flora_category("parsing", "Parsing", "Parser generators, combinators and tools to help with parsing").
flora_category("physics", "Physics", "The study of matter, its consituents, motion, and behaviour").
flora_category("prelude", "Prelude", "Libraries that provide default imports").
flora_category("streaming", "Streaming", "Data streaming for continuous processing").
flora_category("system", "Systems Programming", "Programming and communicating with the Operating System").
flora_category("template-haskell", "Template Haskell", "Metaprogramming with Template Haskell").
flora_category("testing", "Testing", "Test frameworks").
flora_category("text", "Text", "Working with textual data and algorithms").
flora_category("type-system", "Type System", "Enhancing the Haskell type system").
flora_category("web", "Web Development", "Programming for the web").
flora_category("xml", "XML", "Libraries to consume and produce XML documents").

// The actual normalization rules for the categories:
// The first case returns the name if it already appears in flora_category/3
.decl normalise_category(user_input: symbol, normalised: symbol)
normalise_category(X, X) :- flora_category(_, X, _).
normalise_category("Algorithm", "Algorithms").

normalise_category("Crypto", "Cryptography").

normalise_category("CLI", "CLI & TUI Development").
normalise_category("TUI", "CLI & TUI Development").

normalise_category("Command Line", "CLI & TUI Development").
normalise_category("CommandLine", "CLI & TUI Development").

normalise_category("Numeric", "Mathematics").
normalise_category("Numerical", "Mathematics").
normalise_category("Numerics", "Mathematics").
normalise_category("Arithmetic", "Mathematics").
normalise_category("Number Theory", "Mathematics").
normalise_category("Math", "Mathematics").
normalise_category("Mathematics", "Mathematics").
normalise_category("mathematics", "Mathematics").
normalise_category("Maths", "Mathematics").
normalise_category("Algebra", "Mathematics").
normalise_category("Graph", "Mathematics").
normalise_category("Graphs", "Mathematics").
normalise_category("Geometry", "Mathematics").
normalise_category("Tropical Geometry", "Mathematics").

normalise_category("Parser Builder", "Parsers").
normalise_category("Parser Combinators", "Parsers").
normalise_category("Parser", "Parsers").
normalise_category("ParserCombinators", "Parsers").
normalise_category("Parsers", "Parsers").
normalise_category("Parsing", "Parsers").
normalise_category("Parsing Text", "Parsers").

normalise_category("Network", "Network Development").
normalise_category("Data Network", "Network Development").
normalise_category("Network APIs", "Network Development").
normalise_category("Network Control", "Network Development").
normalise_category("NetworkAPI", "Network Development").
normalise_category("NetworkAPIs", "Network Development").
normalise_category("Networking", "Network Development").

normalise_category("Web", "Web Development").
normalise_category("Yesod", "Web Development").
normalise_category("Javascript", "Web Development").
normalise_category("OpenAPI", "Web Development").
normalise_category("Snap", "Web Development").
normalise_category("Servant", "Web Development").
normalise_category("Servant Web", "Web Development").
normalise_category("Web development", "Web Development").

normalise_category("Optics", "Lenses").
normalise_category("Lens", "Lenses").

normalise_category("Conduit", "Streaming").
normalise_category("Streamly", "Streaming").
normalise_category("Pipes", "Streaming").

normalise_category("Monad", "Monads").
normalise_category("MonadIO", "Monads").
normalise_category("Transformers", "Monads").
normalise_category("Monad Transformers", "Monads").
normalise_category("Mtl", "Monads").

normalise_category("User interfaces", "GUI").
normalise_category("User interface", "GUI").
normalise_category("UserInterface", "GUI").
normalise_category("UI", "GUI").
normalise_category("User Interfaces", "GUI").

normalise_category("graphics", "Graphics").

normalise_category("Code Generation", "FFI").
normalise_category("Elm", "FFI").
normalise_category("TypeScript", "FFI").
normalise_category("Java", "FFI").
normalise_category("JVM", "FFI").
normalise_category("Erlang", "FFI").
normalise_category("PHP", "FFI").
normalise_category("Foreign", "FFI").

normalise_category("Types", "Type System").

normalise_category("Validity", "Testing").
normalise_category("QuickCheck", "Testing").
normalise_category("Test", "Testing").

normalise_category("Sound", "Audio").
normalise_category("Algorithmic Music Composition", "Audio").
normalise_category("Automatic Music Generation", "Audio").
normalise_category("Music", "Audio").

normalise_category("Zip", "Compression").
normalise_category("ZLib", "Compression").
normalise_category("Tar", "Compression").

normalise_category("Cloud", "Cloud Computing").
normalise_category("Google", "Cloud Computing").
normalise_category("AWS", "Cloud Computing").

normalise_category("Compilers/Interpreters", "Compilers and Interpreters").
normalise_category("Interpreters", "Compilers and Interpreters").
normalise_category("Compiler", "Compilers and Interpreters").
normalise_category("DSL", "Compilers and Interpreters").

normalise_category("Database", "Databases").
normalise_category("PostgreSQL", "Databases").

normalise_category("NLP", "Natural Language Processing").
normalise_category("Stemming", "Natural Language Processing").

normalise_category("Containers", "Data Structures").

normalise_category("Game", "Game Development").

normalise_category("Concurrent", "Concurrency").
normalise_category("Parallel", "Parallelism").

normalise_category("Distributed Computing", "Distributed Systems & Computation").

normalise_category("Filesystem", "Systems Programming").
normalise_category("system", "Systems Programming").
normalise_category("System", "Systems Programming").

normalise_category("Distribution", "Package Distribution").

normalise_category("SYstem", "Systems Programming").
